"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadContactFlow = void 0;
const aws_sdk_1 = require("aws-sdk");
const aws_sdk_2 = require("aws-sdk");
const call_details_1 = require("./utility/call-details");
let s3Bucket;
const cacheTimeInMilliseconds = 5000;
const defaultLogger = "SMA-Contact-Flow-Parser | Call ID - ";
/**
  * Get the Amazon contact flow details from the Amazon connect.
  * @param smaEvent
  * @param action
  * @param amazonConnectInstanceID
  * @param bucketName
  * @returns Process Flow Action
  */
async function loadContactFlow(amazonConnectInstanceID, amazonConnectContactFlowID, bucket, smaEvent, type) {
    let callId;
    try {
        const legA = (0, call_details_1.getLegACallDetails)(smaEvent);
        callId = legA.CallId;
        if (!callId)
            callId = smaEvent.ActionData.Parameters.CallId;
        s3Bucket = bucket;
        const describeContactFlowParams = {
            ContactFlowId: amazonConnectContactFlowID,
            InstanceId: amazonConnectInstanceID
        };
        const describeContactFlowModuleParams = {
            InstanceId: amazonConnectInstanceID,
            ContactFlowModuleId: amazonConnectContactFlowID
        };
        let rv = await checkFlowCache(amazonConnectInstanceID, amazonConnectContactFlowID, smaEvent);
        if (rv == null) {
            console.log(defaultLogger + callId + " Loading Contact Flow Details from Connect ");
            const connect = new aws_sdk_1.Connect();
            if (type === "Invoke_Module") {
                const contactModuleResponse = await connect.describeContactFlowModule(describeContactFlowModuleParams).promise();
                rv = JSON.parse(contactModuleResponse.ContactFlowModule.Content);
                await writeFlowCache(rv, amazonConnectInstanceID, amazonConnectContactFlowID, smaEvent);
            }
            else {
                const contactFlowResponse = await connect.describeContactFlow(describeContactFlowParams).promise();
                rv = JSON.parse(contactFlowResponse.ContactFlow.Content);
                await writeFlowCache(rv, amazonConnectInstanceID, amazonConnectContactFlowID, smaEvent);
            }
        }
        return rv;
    }
    catch (error) {
        console.error(defaultLogger + callId + " There is an Error in execution of Loading the Contact Flow " + error.message);
        return null;
    }
}
exports.loadContactFlow = loadContactFlow;
/**
  * Writing the Contact Flow Json Response from Amazon Connect into S3 Bucket
  * @param smaEvent
  * @param action
  * @param amazonConnectInstanceID
  * @param bucketName
  * @returns Process Flow Action
  */
async function writeFlowCache(flow, amazonConnectInstanceID, amazonConnectContactFlowID, smaEvent) {
    let callId;
    try {
        const legA = (0, call_details_1.getLegACallDetails)(smaEvent);
        callId = legA.CallId;
        if (!callId)
            callId = smaEvent.ActionData.Parameters.CallId;
        console.log(defaultLogger + callId + " Writing Contact flow Details to S3 Bucket ");
        let flowBinary = Buffer.from(JSON.stringify(flow), 'binary');
        const s3Params = {
            Bucket: s3Bucket,
            Key: amazonConnectContactFlowID,
            Body: flowBinary
        };
        const s3 = new aws_sdk_2.S3();
        await s3.putObject(s3Params).promise();
    }
    catch (error) {
        console.error(defaultLogger + callId + " There is an Error in execution of Writing Connect flow to S3 Bucket " + error.message);
        return null;
    }
}
/**
  * Checking the updated time of Contact Flow Json Response in S3 Bucket, if the Delta time is less than 5 seconds the function will use the stored JSON response in S3 Bucket else it will return null value.
  * @param smaEvent
  * @param action
  * @param amazonConnectInstanceID
  * @param bucketName
  * @returns Process Flow Action
  */
async function checkFlowCache(amazonConnectInstanceID, amazonConnectContactFlowID, smaEvent) {
    let rv = null;
    const s3Params = {
        Bucket: s3Bucket,
        Key: amazonConnectContactFlowID
    };
    const legA = (0, call_details_1.getLegACallDetails)(smaEvent);
    let callId;
    callId = legA.CallId;
    if (!callId)
        callId = smaEvent.ActionData.Parameters.CallId;
    const s3 = new aws_sdk_2.S3();
    try {
        let s3Head = await s3.headObject(s3Params).promise();
        var deltaTimeInMs = new Date().getTime() - s3Head.LastModified.getTime();
        console.log(defaultLogger + callId + " Delta Time of Last updated Flow Cache: " + deltaTimeInMs);
        if (deltaTimeInMs < cacheTimeInMilliseconds) {
            console.log(defaultLogger + callId + " Loading Contact Flow from Flow cache");
            let s3Result = await s3.getObject(s3Params).promise();
            rv = JSON.parse(s3Result.Body.toString());
        }
    }
    catch (error) {
        if (error.name === 'NotFound') {
            rv = null;
        }
        else {
            throw error;
        }
    }
    return rv;
}
