/*
Copyright (c) 2023 tekVizion PVS, Inc. 

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

declare type Data = {
    VOICE_ID: string;
    ENGINE: string;
    LANGUAGE_CODE: string;
    TEXT: string;
    SSML: string;
    region: string;
    CHANNEL: string;
    CUSTOMER_ENDPOINT_TYPE: string;
    SYSTEM_ENDPOINT_TYPE: string;
    DESTINATION_TYPE: string;
    destinationLocation: string;
    TRACK: string;
    BRDIGE_ENDPOINT_TYPE: string;
    DIALOG_TYPE: string;
    CONTENT_TYPE: string;
    SCHEMA_VERSION: string;
    Failure_Speech_SSML: string;
    Failure_Audio_Location: string;
    CONNECT_CONTEXT_STORE: string;
    DEFAULT_LOGGER: string;
    CURRENT_FLOW_BLOCK: string;
    METRIC_ERROR: string;
};
export declare class ContextStore {
    static readonly PAUSE_ACTION = "PauseAction";
    static readonly TMP_MAP = "TmpMap";
    static readonly CONTEXT_ATTRIBUTES = "ContextAttributes";
    static readonly INVOKATION_MODULE_NEXT_ACTION = "InvokationModuleNextAction";
    static readonly ACTUAL_FLOW_ARN = "ActualFlowARN";
    static readonly SPEECH_ATTRIBUTES = "SpeechAttributes";
    static readonly LOOP_COUNT = "LoopCount";
    static readonly TRANSFER_FLOW_ARN = "TransferFlowARN";
    static readonly INVOKE_MODULE_ARN = "InvokeModuleARN";
}
export declare class ContextAttributes {
    static readonly CUSTOMER_ENDPOINT_ADDRESS = "$.CustomerEndpoint.Address";
    static readonly SYSTEM_ENDPOINT_ADDRESS = "$.SystemEndpoint.Address";
    static readonly INITIATION_METHOD = "$.InitiationMethod";
    static readonly CONTACTID = "$.ContactId";
    static readonly INSTANCE_ARN = "$.InstanceARN";
    static readonly CHANNEL = "$.Channel";
    static readonly CUSTOMER_ENDPOINT_TYPE = "$.CustomerEndpoint.Type";
    static readonly SYSTEM_ENDPOINT_TYPE = "$.SystemEndpoint.Type";
}
export declare class LambdaFunctionParameters {
    static readonly CHANNEL = "Channel";
    static readonly CONTACTID = "ContactId";
    static readonly CUSTOMER_ENDPOINT = "CustomerEndpoint";
    static readonly ADDRESS = "Address";
    static readonly TYPE = "Type";
    static readonly INITIAL_CONTACTID = "InitialContactId";
    static readonly INITIATION_METHOD = "InitiationMethod";
    static readonly INSTANCE_ARN = "InstanceARN";
    static readonly SYSTEM_ENDPOINT = "SystemEndpoint";
}
export declare class SpeechParameters {
    static readonly TEXT_TO_SPEECH_VOICE: string;
    static readonly TEXT_TO_SPEECH_ENGINE: string;
    static readonly LANGUAGE_CODE: string;
}
export declare const Attributes: Data;
export declare const Supported_Actions: string[];
export declare const METRIC_PARAMS: {
    MetricData: {
        MetricName: string;
        Dimensions: {
            Name: string;
            Value: string;
        }[];
        Unit: string;
        Value: number;
    }[];
    Namespace: string;
};
export {};
