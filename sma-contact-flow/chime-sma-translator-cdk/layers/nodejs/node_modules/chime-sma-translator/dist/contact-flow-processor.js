"use strict";
/*
Copyright (c) 2023 tekVizion PVS, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.processFlowAction = exports.processRootFlowBlock = exports.processFlow = void 0;
const contact_flow_loader_1 = require("./contact-flow-loader");
const call_recording_1 = require("./sma_mapping_actions/call-recording");
const compare_attribute_1 = require("./sma_mapping_actions/compare-attribute");
const disconnect_participant_1 = require("./sma_mapping_actions/disconnect-participant");
const end_module_1 = require("./sma_mapping_actions/end-module");
const get_participant_input_1 = require("./sma_mapping_actions/get-participant-input");
const invoke_lambda_1 = require("./sma_mapping_actions/invoke-lambda");
const invoke_module_1 = require("./sma_mapping_actions/invoke-module");
const lex_bot_1 = require("./sma_mapping_actions/lex-bot");
const loop_1 = require("./sma_mapping_actions/loop");
const message_participant_1 = require("./sma_mapping_actions/message-participant");
const set_voice_1 = require("./sma_mapping_actions/set-voice");
const transfer_flow_1 = require("./sma_mapping_actions/transfer-flow");
const transfer_to_thirdparty_1 = require("./sma_mapping_actions/transfer-to-thirdparty");
const update_contact_attributes_1 = require("./sma_mapping_actions/update-contact-attributes");
const wait_1 = require("./sma_mapping_actions/wait");
const amazon_connect_action_types_1 = require("./const/amazon-connect-action-types");
const call_details_1 = require("./utility/call-details");
const condition_validation_1 = require("./utility/condition-validation");
const constant_values_1 = require("./const/constant-values");
const error_types_1 = require("./const/error-types");
const event_types_1 = require("./const/event-types");
const next_action_error_handler_1 = require("./utility/next-action-error-handler");
const default_termination_action_1 = require("./utility/default-termination-action");
const constant_values_2 = require("./const/constant-values");
const metric_updation_1 = require("./utility/metric-updation");
const logging_behaviour_1 = require("./sma_mapping_actions/logging-behaviour");
const distribute_by_percentage_1 = require("./sma_mapping_actions/distribute-by-percentage");
const connectContextStore = "ConnectContextStore";
/**
  * This function gets the Contact Flow data from the Contact Flow loader and executes the Contact Flow data by the respective SMA Mapping Actions.
  * @param smaEvent
  * @param amazonConnectInstanceID
  * @param amazonConnectFlowID
  * @param bucketName
  */
async function processFlow(smaEvent, amazonConnectInstanceID, amazonConnectFlowID, bucketName) {
    let callId;
    let contextStore;
    try {
        let type = "Contact_Flow";
        const transactionAttributes = smaEvent.CallDetails.TransactionAttributes;
        if (transactionAttributes) {
            if (transactionAttributes[constant_values_1.Attributes.CONNECT_CONTEXT_STORE]) {
                contextStore = transactionAttributes[constant_values_1.Attributes.CONNECT_CONTEXT_STORE];
            }
            if (transactionAttributes[constant_values_1.Attributes.CONNECT_CONTEXT_STORE] && !transactionAttributes[constant_values_1.Attributes.CONNECT_CONTEXT_STORE][constant_values_1.ContextStore.ACTUAL_FLOW_ARN]) {
                transactionAttributes[constant_values_1.Attributes.CONNECT_CONTEXT_STORE][constant_values_1.ContextStore.ACTUAL_FLOW_ARN] = amazonConnectFlowID;
            }
            if (transactionAttributes[constant_values_1.Attributes.CONNECT_CONTEXT_STORE] && transactionAttributes[constant_values_1.Attributes.CONNECT_CONTEXT_STORE][constant_values_1.ContextStore.TRANSFER_FLOW_ARN]) {
                amazonConnectFlowID = transactionAttributes[constant_values_1.Attributes.CONNECT_CONTEXT_STORE][constant_values_1.ContextStore.TRANSFER_FLOW_ARN];
            }
            if (transactionAttributes[constant_values_1.Attributes.CONNECT_CONTEXT_STORE] && transactionAttributes[constant_values_1.Attributes.CONNECT_CONTEXT_STORE][constant_values_1.ContextStore.INVOKE_MODULE_ARN]) {
                type = "Invoke_Module";
                amazonConnectFlowID = transactionAttributes[constant_values_1.Attributes.CONNECT_CONTEXT_STORE][constant_values_1.ContextStore.INVOKE_MODULE_ARN];
            }
        }
        // creating cloud watch metric parameters and updating the metric details in cloud watch
        let updateMetric = new metric_updation_1.CloudWatchMetric();
        // getting the CallID of the Active call from the SMA Event
        let callDetails = new call_details_1.CallDetailsUtil();
        const legA = callDetails.getLegACallDetails(smaEvent);
        console.log(" After getting Call Details" + legA);
        callId = legA.CallId;
        console.log(" The call ID is " + callId);
        if (!callId)
            callId = smaEvent.ActionData.Parameters.CallId;
        var flowLodingStartTime = new Date().getTime();
        // Loading the Contact Flow/Module when SMA Event received
        const contactFlow = await (0, contact_flow_loader_1.loadContactFlow)(amazonConnectInstanceID, amazonConnectFlowID, bucketName, smaEvent, type);
        // calculating the latency of loading the Contact Flow/Module
        var flowLoadingTime = new Date().getTime() - flowLodingStartTime;
        let params = constant_values_2.METRIC_PARAMS;
        const flowLoadingParams = {
            MetricData: [
                {
                    MetricName: "ContactFlowLoadingTime",
                    Dimensions: [
                        {
                            Name: 'InstanceId',
                            Value: amazonConnectInstanceID
                        },
                        {
                            Name: '',
                            Value: amazonConnectFlowID
                        }
                    ],
                    Unit: 'Milliseconds',
                    Value: flowLoadingTime,
                    Timestamp: new Date()
                },
            ],
            Namespace: 'tekvizion'
        };
        try {
            flowLoadingParams.MetricData[0].Dimensions[1].Name = "Contact Flow ID";
            if (type === "Invoke_Module") {
                flowLoadingParams.MetricData[0].Dimensions[1].Name = 'Module Flow ID';
            }
        }
        catch (error) {
            console.error(constant_values_1.Attributes.DEFAULT_LOGGER + smaEvent.ActionData.Parameters.CallId + constant_values_1.Attributes.METRIC_ERROR + error.message);
        }
        updateMetric.updateMetric(flowLoadingParams);
        console.log(constant_values_1.Attributes.DEFAULT_LOGGER + callId + " ConnectInstanceId:" + amazonConnectInstanceID + " Loaded Contact Flow" + contactFlow);
        if (transactionAttributes && transactionAttributes.currentFlowBlock) {
            console.log(constant_values_1.Attributes.DEFAULT_LOGGER + callId + " InvocationEventType:" + smaEvent.InvocationEventType);
            if (smaEvent.InvocationEventType === event_types_1.EventTypes.HANGUP && transactionAttributes.currentFlowBlock.Type == "TransferParticipantToThirdParty") {
                let disconnect = new disconnect_participant_1.DisconnectParticipant();
                return await disconnect.processFlowActionDisconnectBothParticipant(smaEvent, contextStore);
            }
            else if (smaEvent.InvocationEventType === event_types_1.EventTypes.ACTION_SUCCESSFUL || smaEvent.InvocationEventType === event_types_1.EventTypes.CALL_ANSWERED || smaEvent.InvocationEventType === event_types_1.EventTypes.RINGING) {
                if (smaEvent.ActionData.ReceivedDigits != null) {
                    const recieved_digits = smaEvent.ActionData.ReceivedDigits;
                    return await new condition_validation_1.ConditionValidationUtil().processFlowConditionValidation(smaEvent, transactionAttributes.currentFlowBlock, contactFlow, recieved_digits, amazonConnectInstanceID, bucketName, contextStore);
                }
                return await processFlowActionSuccess(smaEvent, transactionAttributes.currentFlowBlock, contactFlow, amazonConnectInstanceID, bucketName, contextStore);
            }
            else if (smaEvent.InvocationEventType === event_types_1.EventTypes.ACTION_FAILED || smaEvent.InvocationEventType === event_types_1.EventTypes.INVALID_LAMBDA_RESPONSE) {
                return await processFlowActionFailed(smaEvent, transactionAttributes.currentFlowBlock, contactFlow, amazonConnectInstanceID, bucketName, contextStore);
            }
            else {
                let disconnect = new disconnect_participant_1.DisconnectParticipant();
                return await disconnect.processFlowActionDisconnectParticipant(smaEvent, contextStore);
            }
        }
        else {
            if (smaEvent.InvocationEventType === event_types_1.EventTypes.NEW_INBOUND_CALL) {
                let params = constant_values_2.METRIC_PARAMS;
                try {
                    params.MetricData[0].MetricName = "NO_OF_INCOMING_CALLS";
                    params.MetricData[0].Dimensions[0].Value = amazonConnectInstanceID;
                    params.MetricData[0].Dimensions[1].Name = 'Contact Flow ID';
                    params.MetricData[0].Dimensions[1].Value = amazonConnectFlowID;
                    updateMetric.updateMetric(params);
                }
                catch (error) {
                    console.error(constant_values_1.Attributes.DEFAULT_LOGGER + smaEvent.ActionData.Parameters.CallId + constant_values_1.Attributes.METRIC_ERROR + error.message);
                }
                let contextAttributes = await storeSystemAttributes(smaEvent, amazonConnectFlowID, amazonConnectInstanceID);
                contextStore = {
                    [constant_values_1.ContextStore.LOOP_COUNT]: "0",
                    [constant_values_1.ContextStore.TRANSFER_FLOW_ARN]: "",
                    [constant_values_1.ContextStore.INVOKE_MODULE_ARN]: "",
                    [constant_values_1.ContextStore.INVOKATION_MODULE_NEXT_ACTION]: "",
                    [constant_values_1.ContextStore.ACTUAL_FLOW_ARN]: "",
                    [constant_values_1.ContextStore.SPEECH_ATTRIBUTES]: {},
                    [constant_values_1.ContextStore.CONTEXT_ATTRIBUTES]: contextAttributes,
                    [constant_values_1.ContextStore.TMP_MAP]: {},
                    [constant_values_1.ContextStore.PAUSE_ACTION]: null
                };
                const keys = Object.keys(contextAttributes);
                // storing the system attributes in contextstore
                keys.forEach((key, index) => {
                    contextStore[constant_values_1.ContextStore.CONTEXT_ATTRIBUTES][key] = contextAttributes[key];
                });
            }
            return await processRootFlowBlock(smaEvent, contactFlow, amazonConnectInstanceID, bucketName, contextStore);
        }
    }
    catch (error) {
        console.log(constant_values_1.Attributes.DEFAULT_LOGGER + callId + " There is an Error in processing the SMA Event" + error.message);
        return null;
    }
}
exports.processFlow = processFlow;
/**
  * This function stores the system attributes in the contextAttribute object.
  * @param smaEvent
  * @param amazonConnectFlowID
  * @param amazonConnectInstanceID
  * @returns contextAttributes
  */
async function storeSystemAttributes(smaEvent, amazonConnectFlowID, amazonConnectInstanceID) {
    let callDetails = new call_details_1.CallDetailsUtil();
    const legA = callDetails.getLegACallDetails(smaEvent);
    let contextAttributes = {
        [constant_values_1.ContextAttributes.CUSTOMER_ENDPOINT_ADDRESS]: legA.From,
        [constant_values_1.ContextAttributes.SYSTEM_ENDPOINT_ADDRESS]: legA.To,
        [constant_values_1.ContextAttributes.INITIATION_METHOD]: legA.Direction,
        [constant_values_1.ContextAttributes.CONTACTID]: amazonConnectFlowID,
        [constant_values_1.ContextAttributes.INSTANCE_ARN]: amazonConnectInstanceID,
        [constant_values_1.ContextAttributes.CHANNEL]: constant_values_1.Attributes.CHANNEL,
        [constant_values_1.ContextAttributes.CUSTOMER_ENDPOINT_TYPE]: constant_values_1.Attributes.CUSTOMER_ENDPOINT_TYPE,
        [constant_values_1.ContextAttributes.SYSTEM_ENDPOINT_TYPE]: constant_values_1.Attributes.SYSTEM_ENDPOINT_TYPE
    };
    return contextAttributes;
}
/**
  * This function is starting of the flow execution and gets the current action from the Contact Flow.
  * @param smaEvent
  * @param contactFlow
  * @param TransactionAttributes
  * @param amazonConnectInstanceID
  * @param bucketName
  * @returns SMA Action
  */
async function processRootFlowBlock(smaEvent, contactFlow, amazonConnectInstanceID, bucketName, contextStore) {
    let callId;
    try {
        let callDetails = new call_details_1.CallDetailsUtil();
        // getting the CallID of the Active call from the SMA Event
        const legA = callDetails.getLegACallDetails(smaEvent);
        callId = legA.CallId;
        if (!callId)
            callId = smaEvent.ActionData.Parameters.CallId;
        if (contactFlow.StartAction) {
            const actions = contactFlow.Actions;
            console.log(constant_values_1.Attributes.DEFAULT_LOGGER + callId + " ConnectInstanceId:" + amazonConnectInstanceID + " Root Flow Block The actions are" + actions);
            if (actions && actions.length > 0) {
                const currentAction = callDetails.findActionObjectByID(actions, contactFlow.StartAction);
                let actionType = currentAction.Type;
                if (!Object.values(amazon_connect_action_types_1.AmazonConnectActions).includes(actionType)) {
                    return await new default_termination_action_1.TerminatingFlowUtil().terminatingFlowAction(smaEvent, actionType);
                }
                console.log(constant_values_1.Attributes.DEFAULT_LOGGER + callId + " ConnectInstanceId:" + amazonConnectInstanceID + " Root Flow Block The current Action is " + currentAction.Type);
                if (currentAction) {
                    return await processFlowAction(smaEvent, currentAction, actions, amazonConnectInstanceID, bucketName, contextStore);
                }
            }
        }
        return null;
    }
    catch (error) {
        console.error(constant_values_1.Attributes.DEFAULT_LOGGER + callId + " There is an error in getting the Root Flow Block" + error.message);
        return await new default_termination_action_1.TerminatingFlowUtil().terminatingFlowAction(smaEvent, "error");
    }
}
exports.processRootFlowBlock = processRootFlowBlock;
/**
  * This function process the flow actions and call the respective SMA Mapping Class based on the Contact Flow action type.
  * @param smaEvent
  * @param action
  * @param actions
  * @param amazonConnectInstanceID
  * @param bucketName
  * @param contextStore
  * @returns SMA action
  */
async function processFlowAction(smaEvent, action, actions, amazonConnectInstanceID, bucketName, contextStore) {
    switch (action.Type) {
        case amazon_connect_action_types_1.AmazonConnectActions.GET_PARTICIPANT_INPUT:
            let getParticipantInput = new get_participant_input_1.GetParticipantInput();
            return await getParticipantInput.execute(smaEvent, action, contextStore);
        case amazon_connect_action_types_1.AmazonConnectActions.MESSAGE_PARTICIPANT:
            let message_participant = new message_participant_1.MessageParticipant();
            return await message_participant.execute(smaEvent, action, contextStore);
        case amazon_connect_action_types_1.AmazonConnectActions.DISCONNECT_PARTICIPANT:
            let disconnect = new disconnect_participant_1.DisconnectParticipant();
            return await disconnect.processFlowActionDisconnectParticipant(smaEvent, contextStore);
        case amazon_connect_action_types_1.AmazonConnectActions.WAIT:
            let wait = new wait_1.Wait();
            return await wait.processFlowActionWait(smaEvent, action, actions, amazonConnectInstanceID, bucketName, contextStore);
        case amazon_connect_action_types_1.AmazonConnectActions.UPDATE_CONTACT_RECORDING_BEHAVIOUR:
            let callRecording = new call_recording_1.CallRecording();
            return await callRecording.processFlowActionUpdateContactRecordingBehavior(smaEvent, action, contextStore);
        case amazon_connect_action_types_1.AmazonConnectActions.LOOP:
            let loop = new loop_1.Loop();
            return await loop.processFlowActionLoop(smaEvent, action, actions, amazonConnectInstanceID, bucketName, contextStore);
        case amazon_connect_action_types_1.AmazonConnectActions.TRANSFER_PARTICIPANT_TO_THIRD_PARTY:
            let transferThirdParty = new transfer_to_thirdparty_1.TransferTOThirdParty();
            return await transferThirdParty.execute(smaEvent, action, contextStore);
        case amazon_connect_action_types_1.AmazonConnectActions.CONNECT_PARTICIPANT_WITH_LEX_BOT:
            let lexbot = new lex_bot_1.LexBot();
            return await lexbot.processFlowActionConnectParticipantWithLexBot(smaEvent, action, contextStore);
        case amazon_connect_action_types_1.AmazonConnectActions.TRANSFER_TO_FLOW:
            let transferToFlow = new transfer_flow_1.TrasferToFlow();
            return await transferToFlow.processFlowActionTransferToFlow(smaEvent, action, amazonConnectInstanceID, bucketName, contextStore);
        case amazon_connect_action_types_1.AmazonConnectActions.UPDATE_CONTACT_TEXT_TO_SPEECH:
            let updateVoice = new set_voice_1.SetVoice();
            return await updateVoice.processFlowActionUpdateContactTextToSpeechVoice(smaEvent, action, actions, amazonConnectInstanceID, bucketName, contextStore);
        case amazon_connect_action_types_1.AmazonConnectActions.INVOKE_LAMBDA_FUNCTION:
            let invokeLambda = new invoke_lambda_1.InvokeLambda();
            return await invokeLambda.processFlowActionInvokeLambdaFunction(smaEvent, action, actions, amazonConnectInstanceID, bucketName, contextStore);
        case amazon_connect_action_types_1.AmazonConnectActions.UPDATE_CONTACT_ATTRIBUTES:
            let update = new update_contact_attributes_1.UpdateContactAttrbts();
            return await update.processFlowActionUpdateContactAttributes(smaEvent, action, actions, amazonConnectInstanceID, bucketName, contextStore);
        case amazon_connect_action_types_1.AmazonConnectActions.COMPARE:
            let compare = new compare_attribute_1.CompareAttribute();
            return await compare.processFlowActionCompareContactAttributes(smaEvent, action, actions, amazonConnectInstanceID, bucketName, contextStore);
        case amazon_connect_action_types_1.AmazonConnectActions.INVOKE_FLOW_MODULE:
            let invoke = new invoke_module_1.InvokeModule();
            return await invoke.processFlowActionInvokeFlowModule(smaEvent, action, amazonConnectInstanceID, bucketName, contextStore);
        case amazon_connect_action_types_1.AmazonConnectActions.END_FLOW_MODULE_EXECUTION:
            let endModule = new end_module_1.EndModule();
            return await endModule.processFlowActionEndFlowModuleExecution(smaEvent, amazonConnectInstanceID, bucketName, contextStore);
        case amazon_connect_action_types_1.AmazonConnectActions.UPDATE_FLOW_LOGGING_BEHAVIOUR:
            let loggingBehaviour = new logging_behaviour_1.LoggingBehaviour();
            return await loggingBehaviour.execute(smaEvent, action, actions, amazonConnectInstanceID, bucketName, contextStore);
        case amazon_connect_action_types_1.AmazonConnectActions.DISTRIBUTE_BY_PERCENTAGE:
            let distributeBypercentage = new distribute_by_percentage_1.DistributeByPercentage();
            return await distributeBypercentage.execute(smaEvent, action, actions, amazonConnectInstanceID, bucketName, contextStore);
        default:
            return null;
    }
}
exports.processFlowAction = processFlowAction;
/**
  * Processing the Contact Flow after receiving the successful SMA event
  * @param smaEvent
  * @param action
  * @param amazonConnectInstanceID
  * @param bucketName
  * @param contextStore
  * @returns Process Flow Action or processFlowConditionValidation or terminatingFlowAction
  */
async function processFlowActionSuccess(smaEvent, action, contactFlow, amazonConnectInstanceID, bucketName, contextStore) {
    let callId;
    try {
        // getting the CallID of the Active call from the SMA Event
        let callDetails = new call_details_1.CallDetailsUtil();
        const legA = callDetails.getLegACallDetails(smaEvent);
        callId = legA.CallId;
        if (!callId)
            callId = smaEvent.ActionData.Parameters.CallId;
        let transactionAttributes = smaEvent.CallDetails.TransactionAttributes;
        if (smaEvent.ActionData.Type == "CallAndBridge") {
            return {
                "SchemaVersion": constant_values_1.Attributes.SCHEMA_VERSION,
                "Actions": []
            };
        }
        if (action.Parameters && action.Parameters.StoreInput == "True") {
            smaEvent.CallDetails.TransactionAttributes = updateConnectContextStore(transactionAttributes, "StoredCustomerInput", smaEvent.ActionData.ReceivedDigits);
        }
        if (smaEvent.ActionData.IntentResult) {
            if (smaEvent.ActionData.IntentResult.SessionState.SessionAttributes) {
                let x = smaEvent.ActionData.IntentResult.SessionState.SessionAttributes;
                const keys = Object.keys(x);
                keys.forEach((key, index) => {
                    contextStore[constant_values_1.ContextStore.CONTEXT_ATTRIBUTES]["$.External." + key] = x[key];
                    contextStore[constant_values_1.ContextStore.TMP_MAP][key] = x[key];
                });
            }
            let intentName = smaEvent.ActionData.IntentResult.SessionState.Intent.Name;
            return await new condition_validation_1.ConditionValidationUtil().processFlowConditionValidation(smaEvent, transactionAttributes.currentFlowBlock, contactFlow, intentName, amazonConnectInstanceID, bucketName, contextStore);
        }
        const nextAction = callDetails.findActionObjectByID(contactFlow.Actions, action.Transitions.NextAction);
        let actionType = nextAction.Type;
        //checking if the action object is supported by the tekVizion's Library
        if (!Object.values(amazon_connect_action_types_1.AmazonConnectActions).includes(actionType)) {
            return await new default_termination_action_1.TerminatingFlowUtil().terminatingFlowAction(smaEvent, actionType);
        }
        return await processFlowAction(smaEvent, nextAction, contactFlow.Actions, amazonConnectInstanceID, bucketName, smaEvent.CallDetails.TransactionAttributes[constant_values_1.Attributes.CONNECT_CONTEXT_STORE]);
    }
    catch (error) {
        console.error(constant_values_1.Attributes.DEFAULT_LOGGER + callId + " There is an error in proccessing the success SMA Event " + error.message);
        return null;
    }
}
function updateConnectContextStore(transactionAttributes, key, value) {
    if (transactionAttributes[connectContextStore])
        transactionAttributes[connectContextStore][key] = value;
    else {
        transactionAttributes[connectContextStore] = {};
        transactionAttributes[connectContextStore][key] = value;
    }
    return transactionAttributes;
}
/**
  * Processing the contact flow after receiving the failure event from SMA
  * @param smaEvent
  * @param actionObj
  * @param amazonConnectInstanceID
  * @param bucketName
  * @param contextStore
  * @returns Process Flow Action or terminatingFlowAction
  */
async function processFlowActionFailed(smaEvent, actionObj, contactFlow, amazonConnectInstanceID, bucketName, contextStore) {
    let callId;
    try {
        // getting the CallID of the Active call from the SMA Event
        let callDetails = new call_details_1.CallDetailsUtil();
        const legA = callDetails.getLegACallDetails(smaEvent);
        callId = legA.CallId;
        if (!callId)
            callId = smaEvent.ActionData.Parameters.CallId;
        let currentAction = contactFlow.Actions.find((action) => action.Identifier === actionObj.Identifier);
        let nextAction;
        if (smaEvent && smaEvent.ActionData.ErrorType.includes(error_types_1.ErrorTypes.INPUT_TIME_LIMIT_EXCEEDS) || smaEvent.ActionData.ErrorType.includes(error_types_1.ErrorTypes.INVALID_DIGITS_RECEIVED)) {
            nextAction = await new next_action_error_handler_1.NextActionValidationUtil().getNextActionForError(currentAction, contactFlow.Actions, error_types_1.ErrorTypes.INPUT_TIME_LIMIT_EXCEEDS, smaEvent);
        }
        else if (smaEvent && smaEvent.ActionData.ErrorType.includes(error_types_1.ErrorTypes.NO_MATCHING_CONDITION)) {
            nextAction = await new next_action_error_handler_1.NextActionValidationUtil().getNextActionForError(currentAction, contactFlow, error_types_1.ErrorTypes.NO_MATCHING_CONDITION, smaEvent);
        }
        else if (smaEvent && smaEvent.ActionData.ErrorType.includes(error_types_1.ErrorTypes.CONNECTION_TIME_LIMIT_EXCEEDED)) {
            nextAction = await new next_action_error_handler_1.NextActionValidationUtil().getNextActionForError(currentAction, contactFlow, error_types_1.ErrorTypes.CONNECTION_TIME_LIMIT_EXCEEDED, smaEvent);
        }
        else if (smaEvent && smaEvent.ActionData.ErrorType.includes(error_types_1.ErrorTypes.CALL_FAILED)) {
            nextAction = await new next_action_error_handler_1.NextActionValidationUtil().getNextActionForError(currentAction, contactFlow, error_types_1.ErrorTypes.CALL_FAILED, smaEvent);
        }
        else if (smaEvent && smaEvent.ActionData.ErrorType.includes(error_types_1.ErrorTypes.INVALID_PHONE_NUMBER)) {
            nextAction = await new next_action_error_handler_1.NextActionValidationUtil().getNextActionForError(currentAction, contactFlow, error_types_1.ErrorTypes.INVALID_PHONE_NUMBER, smaEvent);
        }
        else {
            let count;
            for (let i = 0; i < currentAction.Transitions.Errors.length; i++) {
                if (currentAction.Transitions.Errors[i].ErrorType == error_types_1.ErrorTypes.NO_MATCHING_ERROR) {
                    count = i;
                    break;
                }
            }
            nextAction = callDetails.findActionObjectByID(contactFlow.Actions, currentAction.Transitions.Errors[count].NextAction);
            console.log(constant_values_1.Attributes.DEFAULT_LOGGER + callId + "Next Action identifier:" + nextAction);
        }
        let actionType = nextAction.Type;
        //checking if the action object is supported by the tekVizion's Library
        if (!Object.values(amazon_connect_action_types_1.AmazonConnectActions).includes(actionType)) {
            return await new default_termination_action_1.TerminatingFlowUtil().terminatingFlowAction(smaEvent, actionType);
        }
        return await processFlowAction(smaEvent, nextAction, contactFlow.Actions, amazonConnectInstanceID, bucketName, contextStore);
    }
    catch (error) {
        console.error(constant_values_1.Attributes.DEFAULT_LOGGER + callId + " There is an error in proccessing the failed SMA Event " + error.message);
        return null;
    }
}
