"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpeakAndGetDigits = void 0;
const call_details_1 = require("../utility/call-details");
const chime_action_types_1 = require("../const/chime-action-types");
const default_termination_action_1 = require("../utility/default-termination-action");
const constant_values_1 = require("../const/constant-values");
const metric_updation_1 = require("../utility/metric-updation");
const speech_parameter_1 = require("./speech-parameter");
/**
  * Making the SMA action for converting the Text or SSML to perform speak and getdigits action.
  * @param smaEvent
  * @param action
  * @param contextStore
  * @returns SMA action
  */
class SpeakAndGetDigits extends speech_parameter_1.SpeechParameter {
    async execute(smaEvent, action, contextStore) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        let callId;
        let smaAction1;
        // creating cloud watch metric parameter and updating the metric details in cloud watch
        let metric = new metric_updation_1.CloudWatchMetric();
        let params = metric.createParams(contextStore, smaEvent);
        try {
            // getting the CallID of the Active call from the SMA Event
            let callDetails = new call_details_1.CallDetailsUtil();
            const legA = callDetails.getLegACallDetails(smaEvent);
            callId = legA.CallId;
            if (!callId)
                callId = smaEvent.ActionData.Parameters.CallId;
            console.log(constant_values_1.Attributes.DEFAULT_LOGGER + callId + " Speak and Get Digits Action");
            let speech_parameter = await this.getSpeechParameters(smaEvent, action, contextStore, "SpeechParameters");
            let failure_parameter = await this.getSpeechParameters(smaEvent, action, contextStore, "FailureSpeechParameters");
            let smaAction = {
                Type: chime_action_types_1.ChimeActions.SPEAK_AND_GET_DIGITS,
                Parameters: {
                    "CallId": legA.CallId,
                    "SpeechParameters": speech_parameter,
                    "FailureSpeechParameters": failure_parameter,
                    "MinNumberOfDigits": 1,
                    "Repeat": 3,
                }
            };
            let text = smaAction.Parameters.SpeechParameters.Text;
            // verifing if there are any Invalid_Text present.
            if (text.includes("$.")) {
                return await new default_termination_action_1.TerminatingFlowUtil().terminatingFlowAction(smaEvent, "Invalid_Text");
            }
            if ((_a = action.Parameters) === null || _a === void 0 ? void 0 : _a.InputValidation) {
                if ((_c = (_b = action.Parameters) === null || _b === void 0 ? void 0 : _b.InputValidation) === null || _c === void 0 ? void 0 : _c.CustomValidation) {
                    if ((_f = (_e = (_d = action.Parameters) === null || _d === void 0 ? void 0 : _d.InputValidation) === null || _e === void 0 ? void 0 : _e.CustomValidation) === null || _f === void 0 ? void 0 : _f.MaximumLength) {
                        smaAction.Parameters['MaxNumberOfDigits'] = (_j = (_h = (_g = action.Parameters) === null || _g === void 0 ? void 0 : _g.InputValidation) === null || _h === void 0 ? void 0 : _h.CustomValidation) === null || _j === void 0 ? void 0 : _j.MaximumLength;
                    }
                }
            }
            if (action.Parameters.DTMFConfiguration && action.Parameters.DTMFConfiguration.InputTerminationSequence) {
                smaAction.Parameters["TerminatorDigits"] = action.Parameters.DTMFConfiguration.InputTerminationSequence;
            }
            if (action.Parameters.InputTimeLimitSeconds) {
                const timeLimit = Number.parseInt(action.Parameters.InputTimeLimitSeconds);
                smaAction.Parameters["RepeatDurationInMilliseconds"] = timeLimit * 1000;
            }
            params.MetricData[0].MetricName = "SpeakAndGetDigitsSuccess";
            metric.updateMetric(params);
            let pauseAction = contextStore[constant_values_1.ContextStore.PAUSE_ACTION];
            // checking if the pause action is there to perform before the actual action
            if (pauseAction) {
                smaAction1 = pauseAction;
                contextStore[constant_values_1.ContextStore.PAUSE_ACTION] = null;
                return {
                    "SchemaVersion": constant_values_1.Attributes.SCHEMA_VERSION,
                    "Actions": [
                        smaAction1, smaAction
                    ],
                    "TransactionAttributes": {
                        [constant_values_1.Attributes.CURRENT_FLOW_BLOCK]: action,
                        [constant_values_1.Attributes.CONNECT_CONTEXT_STORE]: contextStore
                    }
                };
            }
            return {
                "SchemaVersion": constant_values_1.Attributes.SCHEMA_VERSION,
                "Actions": [
                    smaAction
                ],
                "TransactionAttributes": {
                    [constant_values_1.Attributes.CURRENT_FLOW_BLOCK]: action,
                    [constant_values_1.Attributes.CONNECT_CONTEXT_STORE]: contextStore
                }
            };
        }
        catch (error) {
            params.MetricData[0].MetricName = "SpeakAndGetDigitsFailure";
            metric.updateMetric(params);
            console.error(constant_values_1.Attributes.DEFAULT_LOGGER + callId + " There is an error in execution of GetParticipantInput" + error.message);
            return await new default_termination_action_1.TerminatingFlowUtil().terminatingFlowAction(smaEvent, "error");
        }
    }
}
exports.SpeakAndGetDigits = SpeakAndGetDigits;
