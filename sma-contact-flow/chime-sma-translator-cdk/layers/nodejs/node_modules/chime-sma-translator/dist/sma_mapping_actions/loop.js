"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Loop = void 0;
const call_details_1 = require("../utility/call-details");
const contact_flow_processor_1 = require("../contact-flow-processor");
const default_termination_action_1 = require("../utility/default-termination-action");
const constant_values_1 = require("../const/constant-values");
/**
  * Making a SMA action to perform Repeats the looping action block for the specified number of times. After which, the loop complete block will be executed
  * @param smaEvent
  * @param action
  * @param actions
  * @param amazonConnectInstanceID
  * @param bucketName
  * @param contextStore
  * @returns SMA action
  */
class Loop {
    async processFlowActionLoop(smaEvent, action, actions, amazonConnectInstanceID, bucketName, contextStore) {
        let callId;
        try {
            // getting the CallID of the Active call from the SMA Event
            let callDetails = new call_details_1.CallDetailsUtil();
            const legA = callDetails.getLegACallDetails(smaEvent);
            callId = legA.CallId;
            if (!callId)
                callId = smaEvent.ActionData.Parameters.CallId;
            let ActualloopCountVal = action.Parameters.LoopCount;
            let loopCountVal = contextStore[constant_values_1.ContextStore.LOOP_COUNT];
            // checking the loop count value in the context store with the loop count value defined in the Contact Flow
            if (loopCountVal !== ActualloopCountVal) {
                let nextAction = "";
                if (action.Transitions.Conditions[0].Condition.Operands[0] === 'ContinueLooping')
                    nextAction = callDetails.findActionObjectByID(actions, action.Transitions.Conditions[0].NextAction);
                else
                    nextAction = callDetails.findActionObjectByID(actions, action.Transitions.Conditions[1].NextAction);
                console.log(constant_values_1.Attributes.DEFAULT_LOGGER + callId + " Next Action identifier:" + action.Transitions.Conditions[0].NextAction);
                // increasing the loop count by 1 in the contextstore
                let count = String(Number.parseInt(loopCountVal) + 1);
                contextStore[constant_values_1.ContextStore.LOOP_COUNT] = count;
                return await (0, contact_flow_processor_1.processFlowAction)(smaEvent, nextAction, actions, amazonConnectInstanceID, bucketName, contextStore);
            }
            else {
                // update the loop count value as 0 in the contextstore, once both actual and contextstore loop count values are equal
                contextStore[constant_values_1.ContextStore.LOOP_COUNT] = "0";
                let nextAction = "";
                if (action.Transitions.Conditions[0].Condition.Operands[0] === 'DoneLooping')
                    nextAction = callDetails.findActionObjectByID(actions, action.Transitions.Conditions[0].NextAction);
                else
                    nextAction = callDetails.findActionObjectByID(actions, action.Transitions.Conditions[1].NextAction);
                console.log(constant_values_1.Attributes.DEFAULT_LOGGER + callId + " Next Action identifier:" + action.Transitions.Conditions[1].NextAction);
                return await (0, contact_flow_processor_1.processFlowAction)(smaEvent, nextAction, actions, amazonConnectInstanceID, bucketName, contextStore);
            }
        }
        catch (error) {
            console.error(constant_values_1.Attributes.DEFAULT_LOGGER + callId + " There is an error in execution of Loop " + error.message);
            return await new default_termination_action_1.TerminatingFlowUtil().terminatingFlowAction(smaEvent, "error");
        }
    }
}
exports.Loop = Loop;
