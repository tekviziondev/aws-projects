"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateContactAttrbts = void 0;
const call_details_1 = require("../utility/call-details");
const error_types_1 = require("../const/error-types");
const contact_flow_processor_1 = require("../contact-flow-processor");
const next_action_error_handler_1 = require("../utility/next-action-error-handler");
const constant_values_1 = require("../const/constant-values");
const metric_updation_1 = require("../utility/metric-updation");
/**
  * Get the Contact attribute details from Contact Flow and updating in the ContextStore
  * @param smaEvent
  * @param action
  * @param actions
  * @param amazonConnectInstanceID
  * @param bucketName
  * @param contextStore
  * @returns The Next SMA action to perform
  */
class UpdateContactAttrbts {
    async processFlowActionUpdateContactAttributes(smaEvent, action, actions, amazonConnectInstanceID, bucketName, contextStore) {
        let callId;
        let tmpMap = contextStore[constant_values_1.ContextStore.TMP_MAP];
        let contextAttributes = contextStore[constant_values_1.ContextStore.CONTEXT_ATTRIBUTES];
        // getting the CallID of the Active call from the SMA Event
        let callDetails = new call_details_1.CallDetailsUtil();
        // creating cloud watch metric parameter and updating the metric details in cloud watch
        let metric = new metric_updation_1.CloudWatchMetric();
        let params = metric.createParams(contextStore, smaEvent);
        try {
            const legA = callDetails.getLegACallDetails(smaEvent);
            callId = legA.CallId;
            if (!callId)
                callId = smaEvent.ActionData.Parameters.CallId;
            let ContactAttributes = Object.entries(action.Parameters.Attributes);
            //iterate the contact attributes, if the value has any external attribute to replace
            for (let i = 0; i < ContactAttributes.length; i++) {
                let x = ContactAttributes[i][1];
                if (x.includes("$.External.")) {
                    let tmp = x.split("$.External.");
                    if (tmpMap.hasOwnProperty(tmp[1])) {
                        contextAttributes["$.Attributes." + ContactAttributes[i][0]] = tmpMap[tmp[1]];
                    }
                }
                //iterate the contact attributes, if the value has any system attribute to replace
                else if (x.includes("$.Attributes.")) {
                    let tmp = x.split("$.Attributes.");
                    if (tmpMap.hasOwnProperty(tmp[1])) {
                        contextAttributes["$.Attributes." + ContactAttributes[i][0]] = tmpMap[tmp[1]];
                    }
                }
                else {
                    contextAttributes["$.Attributes." + ContactAttributes[i][0]] = ContactAttributes[i][1];
                }
            }
            params.MetricData[0].MetricName = "UpdateContactAttributeSuccess";
            metric.updateMetric(params);
        }
        catch (e) {
            params.MetricData[0].MetricName = "UpdateContactAttributeFailure";
            metric.updateMetric(params);
            let nextAction = await new next_action_error_handler_1.NextActionValidationUtil().getNextActionForError(action, actions, error_types_1.ErrorTypes.NO_MATCHING_ERROR, smaEvent);
            return await (0, contact_flow_processor_1.processFlowAction)(smaEvent, nextAction, actions, amazonConnectInstanceID, bucketName, contextStore);
        }
        contextStore[constant_values_1.ContextStore.TMP_MAP] = null;
        let nextAction = callDetails.findActionObjectByID(actions, action.Transitions.NextAction);
        console.error(constant_values_1.Attributes.DEFAULT_LOGGER + callId + " Next Action identifier:" + nextAction);
        return await (0, contact_flow_processor_1.processFlowAction)(smaEvent, nextAction, actions, amazonConnectInstanceID, bucketName, contextStore);
    }
}
exports.UpdateContactAttrbts = UpdateContactAttrbts;
