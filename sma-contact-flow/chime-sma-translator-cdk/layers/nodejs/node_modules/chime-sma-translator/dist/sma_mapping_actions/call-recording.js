"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallRecording = void 0;
const call_details_1 = require("../utility/call-details");
const chime_action_types_1 = require("../const/chime-action-types");
const constant_values_1 = require("../const/constant-values");
const default_termination_action_1 = require("../utility/default-termination-action");
const metric_updation_1 = require("../utility/metric-updation");
/**
  * Making a SMA action to perform Start Call Recording/Stop Call Recording and storing the recorded file in S3 Bucket location
  * @param smaEvent
  * @param action
  * @param contextStore
  * @returns SMA action
  */
class CallRecording {
    async processFlowActionUpdateContactRecordingBehavior(smaEvent, action, contextStore) {
        let callId;
        let pauseAction = contextStore[constant_values_1.ContextStore.PAUSE_ACTION];
        // creating cloud watch metric parameter and updating the metric in cloud watch
        let metric = new metric_updation_1.CloudWatchMetric();
        let params = metric.createParams(contextStore, smaEvent);
        try {
            let smaAction1;
            // getting the CallID of the Active call from the SMA Event
            let callDetails = new call_details_1.CallDetailsUtil();
            const legA = callDetails.getLegACallDetails(smaEvent);
            callId = legA.CallId;
            let smaAction;
            if (!callId)
                callId = smaEvent.ActionData.Parameters.CallId;
            if (action.Parameters.RecordingBehavior.RecordedParticipants.length < 1) {
                smaAction = {
                    Type: chime_action_types_1.ChimeActions.STOP_CALL_RECORDING,
                    Parameters: {
                        "CallId": legA.CallId
                    }
                };
            }
            else {
                let destinationLocation = "";
                if (constant_values_1.Attributes.destinationLocation)
                    destinationLocation = constant_values_1.Attributes.destinationLocation;
                console.log("Destination location  for Call Recording is " + destinationLocation);
                smaAction = {
                    Type: chime_action_types_1.ChimeActions.START_CALL_RECORDING,
                    Parameters: {
                        "CallId": legA.CallId,
                        "Track": constant_values_1.Attributes.TRACK,
                        Destination: {
                            "Type": constant_values_1.Attributes.DESTINATION_TYPE,
                            "Location": destinationLocation
                        }
                    }
                };
            }
            params.MetricData[0].MetricName = smaAction.Type + "Success";
            metric.updateMetric(params);
            // checking if the pause action is there to perform before the actual action
            if (pauseAction) {
                smaAction1 = pauseAction;
                contextStore[constant_values_1.ContextStore.PAUSE_ACTION] = null;
                return {
                    "SchemaVersion": constant_values_1.Attributes.SCHEMA_VERSION,
                    "Actions": [
                        smaAction1, smaAction
                    ],
                    "TransactionAttributes": {
                        [constant_values_1.Attributes.CURRENT_FLOW_BLOCK]: action,
                        [constant_values_1.Attributes.CONNECT_CONTEXT_STORE]: contextStore
                    }
                };
            }
            return {
                "SchemaVersion": constant_values_1.Attributes.SCHEMA_VERSION,
                "Actions": [
                    smaAction
                ],
                "TransactionAttributes": {
                    [constant_values_1.Attributes.CURRENT_FLOW_BLOCK]: action,
                    [constant_values_1.Attributes.CONNECT_CONTEXT_STORE]: contextStore
                }
            };
        }
        catch (error) {
            console.error(constant_values_1.Attributes.DEFAULT_LOGGER + callId + " There is an error in execution UpdateContactRecordingBehavior |" + error.message);
            return await new default_termination_action_1.TerminatingFlowUtil().terminatingFlowAction(smaEvent, "error");
        }
    }
}
exports.CallRecording = CallRecording;
