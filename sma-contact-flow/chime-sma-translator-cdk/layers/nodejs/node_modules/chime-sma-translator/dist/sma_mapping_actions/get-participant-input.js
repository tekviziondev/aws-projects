"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetParticipantInput = void 0;
const call_details_1 = require("../utility/call-details");
const default_termination_action_1 = require("../utility/default-termination-action");
const play_audio_getdigits_1 = require("./play-audio-getdigits");
const speak_and_getdigits_1 = require("./speak-and-getdigits");
const constant_values_1 = require("../const/constant-values");
/**
  * Making a SMA action to perform delivering an audio message or speech to obtain customer input.
  * @param smaEvent
  * @param action
  * @param contextStore
  * @returns SMA action
  */
class GetParticipantInput {
    async execute(smaEvent, action, contextStore) {
        let callId;
        try {
            // getting the CallID of the Active call from the SMA Event
            let callDetails = new call_details_1.CallDetailsUtil();
            const legA = callDetails.getLegACallDetails(smaEvent);
            callId = legA.CallId;
            if (!callId)
                callId = smaEvent.ActionData.Parameters.CallId;
            if (action.Parameters.Media) {
                console.log(constant_values_1.Attributes.DEFAULT_LOGGER + callId + " Play Audio And Get Digits");
                let playAudioGetDigits = new play_audio_getdigits_1.PlayAudioAndGetDigits();
                return await playAudioGetDigits.execute(smaEvent, action, contextStore);
            }
            else {
                console.log(constant_values_1.Attributes.DEFAULT_LOGGER + callId + " Speak And Get Digits");
                let speakAndGetDigits = new speak_and_getdigits_1.SpeakAndGetDigits();
                return await speakAndGetDigits.execute(smaEvent, action, contextStore);
            }
        }
        catch (error) {
            console.error(constant_values_1.Attributes.DEFAULT_LOGGER + callId + " There is an error in execution of GetParticipantInput" + error.message);
            return await new default_termination_action_1.TerminatingFlowUtil().terminatingFlowAction(smaEvent, "error");
        }
    }
}
exports.GetParticipantInput = GetParticipantInput;
