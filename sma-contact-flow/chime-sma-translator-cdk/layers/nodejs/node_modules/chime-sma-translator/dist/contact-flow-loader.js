"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadContactFlow = void 0;
const aws_sdk_1 = require("aws-sdk");
const aws_sdk_2 = require("aws-sdk");
const call_details_1 = require("./utility/call-details");
const constant_values_1 = require("./const/constant-values");
const metric_updation_1 = require("./utility/metric-updation");
const constant_values_2 = require("./const/constant-values");
let s3Bucket;
const cacheTimeInMilliseconds = 5000;
const defaultLogger = "SMA-Contact-Flow-Parser | Call ID - ";
/**
  * Get the Contact Flow details from Amazon connect.
  * @param smaEvent
  * @param amazonConnectInstanceID
  */
async function loadContactFlow(amazonConnectInstanceID, amazonConnectContactFlowID, bucket, smaEvent, type) {
    let callId;
    let metric_type;
    let params = constant_values_1.METRIC_PARAMS;
    try {
        params.MetricData[0].Dimensions[0].Value = amazonConnectInstanceID;
        params.MetricData[0].Dimensions[1].Value = amazonConnectContactFlowID;
        params.MetricData[0].Dimensions[1].Name = "Contact Flow ID";
        metric_type = "ContactFlow";
        if (type === "Invoke_Module") {
            metric_type = "Module";
            params.MetricData[0].Dimensions[1].Name = 'Module Flow ID';
        }
    }
    catch (error) {
        console.error(constant_values_2.Attributes.DEFAULT_LOGGER + smaEvent.ActionData.Parameters.CallId + constant_values_2.Attributes.METRIC_ERROR + error.message);
    }
    // creating cloud watch metric parameters and updating the metric details in cloud watch
    let updateMetric = new metric_updation_1.CloudWatchMetric();
    try {
        // getting the CallID of the Active call from the SMA Event
        let callDetails = new call_details_1.CallDetailsUtil();
        const legA = callDetails.getLegACallDetails(smaEvent);
        callId = legA.CallId;
        if (!callId)
            callId = smaEvent.ActionData.Parameters.CallId;
        s3Bucket = bucket;
        const describeContactFlowParams = {
            ContactFlowId: amazonConnectContactFlowID,
            InstanceId: amazonConnectInstanceID
        };
        const describeContactFlowModuleParams = {
            InstanceId: amazonConnectInstanceID,
            ContactFlowModuleId: amazonConnectContactFlowID
        };
        // gets the Contact Flow Details from the S3 bucket, if the file updated time difference is less than the cache time defined by the user.
        let rv = await checkFlowCache(amazonConnectInstanceID, amazonConnectContactFlowID, smaEvent);
        if (rv == null) {
            console.log(defaultLogger + callId + " Loading Contact Flow Details from Connect ");
            const connect = new aws_sdk_1.Connect();
            if (type === "Invoke_Module") {
                // using the connect API to get the Module details
                const contactModuleResponse = await connect.describeContactFlowModule(describeContactFlowModuleParams).promise();
                rv = JSON.parse(contactModuleResponse.ContactFlowModule.Content);
                await writeFlowCache(rv, amazonConnectInstanceID, amazonConnectContactFlowID, smaEvent);
            }
            else {
                // using the connect API to get the Contact Flow details
                console.log("Start Connect Flow Loading Time " + new Date().getMilliseconds());
                const contactFlowResponse = await connect.describeContactFlow(describeContactFlowParams).promise();
                console.log("End Connect Flow Loading Time " + new Date().getMilliseconds());
                console.log("Start Parsing Time " + new Date().getMilliseconds());
                rv = JSON.parse(contactFlowResponse.ContactFlow.Content);
                console.log("End Parsing Time " + new Date().getMilliseconds());
                await writeFlowCache(rv, amazonConnectInstanceID, amazonConnectContactFlowID, smaEvent);
            }
        }
        params.MetricData[0].MetricName = metric_type + "Success";
        updateMetric.updateMetric(params);
        return rv;
    }
    catch (error) {
        params.MetricData[0].MetricName = metric_type + "Failure";
        updateMetric.updateMetric(params);
        console.error(defaultLogger + callId + " There is an Error in execution of Loading the Contact Flow " + error.message);
        return null;
    }
}
exports.loadContactFlow = loadContactFlow;
/**
  * Writing the Contact Flow Json Response into S3 Bucket
  * @param smaEvent
  * @param amazonConnectInstanceID
  */
async function writeFlowCache(flow, amazonConnectInstanceID, amazonConnectContactFlowID, smaEvent) {
    let callId;
    try {
        // getting the CallID of the Active call from the SMA Event
        let callDetails = new call_details_1.CallDetailsUtil();
        const legA = callDetails.getLegACallDetails(smaEvent);
        callId = legA.CallId;
        if (!callId)
            callId = smaEvent.ActionData.Parameters.CallId;
        console.log(defaultLogger + callId + " Writing Contact flow Details to S3 Bucket ");
        console.log("Start Writing S3  Time " + new Date().getMilliseconds());
        let flowBinary = Buffer.from(JSON.stringify(flow), 'binary');
        const s3Params = {
            Bucket: s3Bucket,
            Key: amazonConnectContactFlowID,
            Body: flowBinary
        };
        // using S3 bucket api for storing the Contact Flow/Module Data
        const s3 = new aws_sdk_2.S3();
        await s3.putObject(s3Params).promise();
        console.log(" End Writing S3  Time " + new Date().getMilliseconds());
    }
    catch (error) {
        console.error(defaultLogger + callId + " There is an Error in execution of Writing Connect flow to S3 Bucket " + error.message);
        return null;
    }
}
/**
  * Checking the updated time of Contact Flow Json Response in S3 Bucket, if the Delta time is less than 5 seconds the function will use the stored JSON response in S3 Bucket else it will return a null value.
  * @param smaEvent
  * @param amazonConnectInstanceID
  */
async function checkFlowCache(amazonConnectInstanceID, amazonConnectContactFlowID, smaEvent) {
    let rv = null;
    const s3Params = {
        Bucket: s3Bucket,
        Key: amazonConnectContactFlowID
    };
    // getting the CallID of the Active call from the SMA Event
    let callDetails = new call_details_1.CallDetailsUtil();
    const legA = callDetails.getLegACallDetails(smaEvent);
    let callId;
    callId = legA.CallId;
    if (!callId)
        callId = smaEvent.ActionData.Parameters.CallId;
    const s3 = new aws_sdk_2.S3();
    try {
        let s3Head = await s3.headObject(s3Params).promise();
        // checking the time difference of the last file update 
        var deltaTimeInMs = new Date().getTime() - s3Head.LastModified.getTime();
        console.log(defaultLogger + callId + " Delta Time of Last updated Flow Cache: " + deltaTimeInMs);
        if (deltaTimeInMs < cacheTimeInMilliseconds) {
            console.log(defaultLogger + callId + " Loading Contact Flow from Flow cache");
            console.log("Start S3 Data Loading Time " + new Date().getMilliseconds());
            let s3Result = await s3.getObject(s3Params).promise();
            console.log("End S3 Data Loading Time " + new Date().getMilliseconds());
            console.log("Start S3 Parsing Time " + new Date().getMilliseconds());
            rv = JSON.parse(s3Result.Body.toString());
            console.log("End S3 Parsing Time " + new Date().getMilliseconds());
        }
    }
    catch (error) {
        if (error.name === 'NotFound') {
            rv = null;
        }
        else {
            throw error;
        }
    }
    return rv;
}
